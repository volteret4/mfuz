#!/usr/bin/env python3
"""
Script para extraer URLs de instrumentos de las p√°ginas de artistas en equipboard.com
"""
import sqlite3
import time
import re
import logging
from datetime import datetime
import random
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.common.action_chains import ActionChains


# Importaciones opcionales para mejor evasi√≥n
try:
    import undetected_chromedriver as uc
    UNDETECTED_AVAILABLE = True
except ImportError:
    UNDETECTED_AVAILABLE = False

try:
    from fake_useragent import UserAgent
    FAKE_UA_AVAILABLE = True
except ImportError:
    FAKE_UA_AVAILABLE = False

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def create_equipboard_instruments_table(cursor):
    """Crea tabla para almacenar URLs de instrumentos"""
    try:
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS equipboard_instruments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            artist_id INTEGER,
            artist_name TEXT NOT NULL,
            equipment_id TEXT,
            equipment_name TEXT NOT NULL,
            equipment_url TEXT NOT NULL,
            brand TEXT,
            model TEXT,
            equipment_type TEXT,
            extraction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            processed BOOLEAN DEFAULT 0,
            
            FOREIGN KEY (artist_id) REFERENCES artists (id),
            UNIQUE(artist_id, equipment_id)
        )''')
        
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_equipboard_instruments_artist ON equipboard_instruments (artist_id)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_equipboard_instruments_processed ON equipboard_instruments (processed)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_equipboard_instruments_equipment_id ON equipboard_instruments (equipment_id)')
        
        logger.info("Tabla equipboard_instruments creada/verificada")
        
    except Exception as e:
        logger.error(f"Error creando tabla: {e}")
        raise

# REEMPLAZA tu funci√≥n setup_selenium_driver con esta versi√≥n corregida:

def setup_selenium_driver(headless=True):
    """Configura driver con compatibilidad mejorada y logging de headless"""
    try:
        # Log del estado headless al inicio
        logger.info(f"üîß Configurando driver - Headless: {headless}")
        
        if UNDETECTED_AVAILABLE:
            options = uc.ChromeOptions()
            logger.info("üîß Usando undetected-chromedriver")
        else:
            options = Options()
            logger.info("üîß Usando selenium normal con evasi√≥n mejorada")
        
        # Aplicar modo headless seg√∫n el par√°metro
        if headless:
            options.add_argument("--headless=new")
            logger.info("üîá Modo headless ACTIVADO")
        else:
            logger.info("üñ•Ô∏è Modo con interfaz gr√°fica ACTIVADO")
        
        # ... resto de opciones igual ...
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-gpu")
        options.add_argument("--disable-extensions")
        options.add_argument("--window-size=1920,1080")
        options.add_argument("--start-maximized")
        
        # User agent seg√∫n disponibilidad
        if FAKE_UA_AVAILABLE:
            ua = UserAgent()
            user_agent = ua.random
            logger.info(f"üé≠ Usando user agent aleatorio: {user_agent[:50]}...")
        else:
            user_agent = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36'
            logger.info("üé≠ Usando user agent fijo")
        
        options.add_argument(f'--user-agent={user_agent}')
        
        # Solo aplicar opciones experimentales con selenium normal
        if not UNDETECTED_AVAILABLE:
            options.add_argument("--disable-blink-features=AutomationControlled")
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
        
        # Crear driver seg√∫n disponibilidad
        if UNDETECTED_AVAILABLE:
            driver = uc.Chrome(options=options, version_main=None)
        else:
            driver = webdriver.Chrome(options=options)
        
        # Scripts de evasi√≥n solo con selenium normal
        if not UNDETECTED_AVAILABLE:
            stealth_scripts = [
                "Object.defineProperty(navigator, 'webdriver', {get: () => undefined})",
                "Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]})",
                "Object.defineProperty(navigator, 'languages', {get: () => ['en-US', 'en']})",
                "window.chrome = {runtime: {}}"
            ]
            
            for script in stealth_scripts:
                try:
                    driver.execute_script(script)
                except:
                    pass
        
        driver.set_page_load_timeout(45)
        
        # Log de confirmaci√≥n final
        mode_text = "headless" if headless else "con interfaz"
        if UNDETECTED_AVAILABLE:
            logger.info(f"‚úÖ Driver undetected-chrome configurado exitosamente ({mode_text})")
        else:
            logger.info(f"‚úÖ Driver selenium mejorado configurado exitosamente ({mode_text})")
        
        return driver
        
    except Exception as e:
        logger.error(f"Error configurando driver: {e}")
        
        # Fallback con logging
        try:
            logger.info("üîÑ Intentando configuraci√≥n fallback...")
            
            if UNDETECTED_AVAILABLE:
                options = uc.ChromeOptions()
                if headless:
                    options.add_argument("--headless=new")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                driver = uc.Chrome(options=options)
            else:
                options = Options()
                if headless:
                    options.add_argument("--headless=new")
                options.add_argument("--no-sandbox")
                options.add_argument("--disable-dev-shm-usage")
                driver = webdriver.Chrome(options=options)
            
            driver.set_page_load_timeout(45)
            mode_text = "headless" if headless else "con interfaz"
            logger.info(f"‚úÖ Driver fallback configurado exitosamente ({mode_text})")
            return driver
            
        except Exception as fallback_error:
            logger.error(f"Error en configuraci√≥n fallback: {fallback_error}")
            return None


def handle_cloudflare_improved(driver, max_wait=30):
    """Versi√≥n mejorada para detectar Cloudflare con menos falsos positivos"""
    try:
        logger.info("üîç Verificando Cloudflare...")
        
        # Esperar tiempo inicial m√°s corto
        time.sleep(random.uniform(2, 3))
        
        # Indicadores m√°s espec√≠ficos de Cloudflare
        cloudflare_indicators = [
            "checking your browser before accessing",
            "please wait while we check your browser",
            "verifying you are human",
            "ray id:",
            "cf-browser-verification",
            "challenge-platform",
            "cf-challenge",
            "turnstile-wrapper",
            "cloudflare-static"
        ]
        
        # Indicadores positivos de que la p√°gina est√° bien
        positive_indicators = [
            "equipboard",
            "gear",
            "equipment", 
            "instruments",
            "uses",
            "artist",
            "setup",
            "studio"
        ]
        
        wait_time = 0
        checks_count = 0
        
        while wait_time < max_wait and checks_count < 5:
            try:
                page_source = driver.page_source.lower()
                current_url = driver.current_url.lower()
                page_title = driver.title.lower()
                
                # Verificar primero si hay contenido positivo
                positive_content = any(indicator in page_source for indicator in positive_indicators)
                positive_title = any(indicator in page_title for indicator in positive_indicators)
                valid_url = 'equipboard.com/pros/' in current_url
                
                # Si hay contenido positivo y URL v√°lida, no es Cloudflare
                if (positive_content or positive_title) and valid_url:
                    logger.info("‚úÖ Contenido v√°lido detectado, no hay Cloudflare")
                    return True
                
                # Solo buscar Cloudflare si no hay contenido positivo
                if not positive_content:
                    is_cloudflare = any(indicator in page_source for indicator in cloudflare_indicators)
                    
                    # Verificaciones adicionales m√°s espec√≠ficas
                    title_check = any(cf_term in page_title for cf_term in ['checking', 'verifying', 'cloudflare'])
                    
                    if is_cloudflare or title_check:
                        logger.warning(f"‚òÅÔ∏è Cloudflare confirmado, esperando... {wait_time}s/{max_wait}s")
                        
                        # Solo simular actividad cada 4 checks para no ser tan obvio
                        if checks_count % 4 == 0:
                            simulate_human_behavior(driver)
                        
                        sleep_time = random.uniform(4, 7)
                        time.sleep(sleep_time)
                        wait_time += sleep_time
                        checks_count += 1
                        continue
                
                # Si llegamos aqu√≠, verificar longitud m√≠nima del contenido
                if len(page_source) > 1000:
                    logger.info("‚úÖ P√°gina con contenido suficiente, asumiendo v√°lida")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è P√°gina con poco contenido, esperando m√°s carga...")
                    time.sleep(3)
                    wait_time += 3
                    checks_count += 1
                        
            except Exception as e:
                logger.warning(f"Error verificando p√°gina: {e}")
                time.sleep(2)
                wait_time += 2
                checks_count += 1
        
        # Si salimos del bucle, verificar una √∫ltima vez
        try:
            final_source = driver.page_source.lower()
            final_positive = any(indicator in final_source for indicator in positive_indicators)
            
            if final_positive:
                logger.info("‚úÖ Contenido v√°lido encontrado en verificaci√≥n final")
                return True
            else:
                logger.error("‚ùå No se encontr√≥ contenido v√°lido despu√©s de esperar")
                return False
        except:
            logger.error("‚ùå Error en verificaci√≥n final")
            return False
        
    except Exception as e:
        logger.error(f"Error manejando Cloudflare: {e}")
        return False


def verify_page_content(driver, artist_name, max_wait=10):
    """Verificaci√≥n mejorada del contenido de la p√°gina"""
    try:
        logger.info(f"üîç Verificando contenido mejorado para {artist_name}")
        
        wait_time = 0
        while wait_time < max_wait:
            try:
                page_source = driver.page_source.lower()
                current_url = driver.current_url.lower()
                page_title = driver.title.lower()
                
                # Verificar indicadores de error espec√≠ficos de Equipboard
                error_indicators = [
                    'page not found',
                    '404',
                    'artist not found',
                    'no gear found',
                    'sign up for equipboard',
                    'create your equipboard account',
                    'join equipboard',
                    'this page does not exist'
                ]
                
                if any(indicator in page_source for indicator in error_indicators):
                    logger.warning(f"‚ö†Ô∏è P√°gina de error detectada para {artist_name}")
                    return False
                
                # Verificar contenido positivo espec√≠fico de Equipboard
                positive_indicators = [
                    'gear and equipment',
                    'uses this',
                    'studio equipment',
                    'find relevant music gear',
                    'music gear like',
                    '/items/',  # URLs de equipos
                    'equipment including'
                ]
                
                has_positive_content = any(indicator in page_source for indicator in positive_indicators)
                
                # Verificar que la URL corresponde al artista correcto
                artist_slug = artist_name.lower().replace(' ', '-').replace('(', '').replace(')', '')
                is_correct_artist = artist_slug in current_url
                
                # Verificar que hay elementos de equipo en la p√°gina
                gear_elements = len(driver.find_elements(By.CSS_SELECTOR, "a[href*='/items/']"))
                
                if has_positive_content and (is_correct_artist or gear_elements > 0):
                    logger.info(f"‚úÖ Contenido v√°lido confirmado para {artist_name} (elementos: {gear_elements})")
                    return True
                
                # Si no hay contenido v√°lido, esperar m√°s tiempo
                time.sleep(2)
                wait_time += 2
                
            except Exception as e:
                logger.warning(f"Error verificando contenido: {e}")
                time.sleep(1)
                wait_time += 1
        
        # Verificaci√≥n final relajada
        try:
            final_source = driver.page_source.lower()
            final_gear_count = len(driver.find_elements(By.CSS_SELECTOR, "a[href*='/items/']"))
            
            # Aceptar si hay al menos algunos elementos de gear o contenido de equipboard
            if ('equipboard' in final_source and len(final_source) > 2000) or final_gear_count > 0:
                logger.info(f"‚úÖ P√°gina aceptada con verificaci√≥n relajada para {artist_name} (elementos: {final_gear_count})")
                return True
                
        except Exception as e:
            logger.debug(f"Error en verificaci√≥n final: {e}")
        
        logger.warning(f"‚ö†Ô∏è No se pudo verificar contenido v√°lido para {artist_name}")
        return False
        
    except Exception as e:
        logger.error(f"Error verificando contenido: {e}")
        return False



def debug_page_content(driver, artist_name):
    """Funci√≥n de debug para inspeccionar el contenido de la p√°gina"""
    try:
        logger.info(f"üîç DEBUG: Inspeccionando p√°gina para {artist_name}")
        
        page_source = driver.page_source
        current_url = driver.current_url
        page_title = driver.title
        
        logger.info(f"URL actual: {current_url}")
        logger.info(f"T√≠tulo: {page_title}")
        logger.info(f"Longitud del contenido: {len(page_source)} caracteres")
        
        # Buscar palabras clave importantes
        keywords_to_check = [
            'cloudflare', 'checking', 'verifying', 'equipboard', 
            'gear', 'equipment', 'sign up', 'login', 'error'
        ]
        
        found_keywords = []
        for keyword in keywords_to_check:
            if keyword in page_source.lower():
                found_keywords.append(keyword)
        
        logger.info(f"Palabras clave encontradas: {found_keywords}")
        
        # Mostrar primeras l√≠neas del contenido
        lines = page_source.split('\n')[:10]
        logger.info("Primeras l√≠neas del HTML:")
        for i, line in enumerate(lines):
            logger.info(f"  {i+1}: {line.strip()[:100]}")
        
    except Exception as e:
        logger.error(f"Error en debug de p√°gina: {e}")








def smart_page_load(driver, url, artist_name, max_retries=2, debug_mode=False):
    """Carga de p√°gina mejorada con mejor validaci√≥n"""
    validated_url = validate_and_fix_url(url, artist_name)
    if not validated_url:
        logger.error(f"‚ùå URL no v√°lida para {artist_name}: {url}")
        return False
    
    for attempt in range(max_retries):
        try:
            logger.info(f"üåê Cargando {validated_url} (intento {attempt + 1}/{max_retries})")
            
            if attempt > 0:
                delay = random.uniform(3, 7)
                logger.info(f"‚è≥ Delay entre intentos: {delay:.1f}s...")
                time.sleep(delay)
            
            driver.get(validated_url)
            
            # Debug opcional
            if debug_mode:
                debug_page_content(driver, artist_name)
            
            # Manejar Cloudflare con detecci√≥n mejorada
            if not handle_cloudflare_improved(driver, max_wait=15):
                logger.warning(f"‚ö†Ô∏è Problema con Cloudflare en intento {attempt + 1}")
                continue
            
            # Usar verificaci√≥n mejorada
            if verify_page_content(driver, artist_name):
                logger.info("‚úÖ P√°gina cargada y validada exitosamente")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Contenido no v√°lido en intento {attempt + 1}")
                continue
                
        except Exception as e:
            logger.error(f"‚ùå Error en intento {attempt + 1}: {e}")
            continue
    
    logger.error(f"‚ùå Fall√≥ carga de {validated_url} despu√©s de {max_retries} intentos")
    return False




def extract_instruments_data(driver, artist_name):
    """Extrae los datos de instrumentos con selectores b√°sicos"""
    instruments = []
    processed_ids = set()
    
    try:
        # Selector b√°sico para enlaces de equipos
        gear_elements = driver.find_elements(By.CSS_SELECTOR, "a[href*='/items/']")
        logger.info(f"üîç Elementos encontrados: {len(gear_elements)}")
        
        for element in gear_elements:
            try:
                gear_href = element.get_attribute('href')
                
                # Validar URL b√°sica
                if not gear_href or 'equipboard.com' not in gear_href:
                    continue
                
                # Extraer nombre del equipo
                equipment_name = element.text.strip()
                if not equipment_name or len(equipment_name) < 2:
                    # Intentar obtener de title
                    equipment_name = element.get_attribute('title') or ""
                    if not equipment_name or len(equipment_name) < 2:
                        continue
                
                # Filtrar elementos de navegaci√≥n obvios
                if any(term in equipment_name.lower() for term in ['add gear', 'sign up', 'login', 'view all']):
                    continue
                
                # Extraer ID del equipo
                equipment_id = extract_equipment_id(gear_href)
                if not equipment_id or equipment_id in processed_ids:
                    continue
                
                processed_ids.add(equipment_id)
                
                # Extraer marca y modelo b√°sico
                brand, model = parse_brand_model_simple(equipment_name)
                equipment_type = infer_equipment_type_simple(equipment_name)
                
                instrument_data = {
                    'artist_name': artist_name,
                    'equipment_id': equipment_id,
                    'equipment_name': equipment_name.strip(),
                    'equipment_url': gear_href,
                    'brand': brand,
                    'model': model,
                    'equipment_type': equipment_type
                }
                
                instruments.append(instrument_data)
                
            except Exception as e:
                logger.debug(f"Error procesando elemento: {e}")
                continue
        
        logger.info(f"üéØ Instrumentos √∫nicos procesados: {len(instruments)}")
        return instruments
        
    except Exception as e:
        logger.error(f"‚ùå Error extrayendo datos: {e}")
        return []



def extract_equipment_id(gear_href):
    """Extrae el ID del equipo desde la URL"""
    try:
        # Patrones para URLs de Equipboard
        patterns = [
            r'/items/([^/?#]+)',  # /items/equipment-name
            r'/gear/([^/?#]+)',   # /gear/equipment-name (por si acaso)
            r'equipment[/_-]id[=:]([^&/?#]+)',  # par√°metros con equipment_id
        ]
        
        for pattern in patterns:
            match = re.search(pattern, gear_href)
            if match:
                equipment_id = match.group(1)
                # Limpiar IDs problem√°ticos
                if equipment_id.lower() not in ['new', 'add', 'create', 'submit', 'edit']:
                    return equipment_id
        
        return None
        
    except Exception as e:
        logger.debug(f"Error extrayendo ID de equipo: {e}")
        return None

def is_navigation_element(equipment_name, gear_href):
    """Determina si un elemento es de navegaci√≥n y debe ser filtrado"""
    try:
        name_lower = equipment_name.lower()
        href_lower = gear_href.lower() if gear_href else ""
        
        # T√©rminos de navegaci√≥n
        nav_terms = [
            'add gear', 'add music gear', 'add equipment', 'add your gear',
            'view all', 'show all', 'see all', 'load more', 'show more',
            'gear setup', 'your setup', 'create setup', 'new setup',
            'sign up', 'login', 'register', 'follow', 'subscribe'
        ]
        
        # Verificar t√©rminos exactos
        if name_lower in nav_terms:
            return True
        
        # Verificar t√©rminos parciales
        nav_partial = ['add', 'create', 'new', 'edit', 'setup', 'follow']
        if any(term in name_lower for term in nav_partial) and len(equipment_name.split()) <= 2:
            return True
        
        # Verificar URLs problem√°ticas
        problem_urls = ['/new', '/add', '/create', '/edit', '/signup', '/login']
        if any(term in href_lower for term in problem_urls):
            return True
        
        return False
        
    except Exception as e:
        logger.debug(f"Error verificando navegaci√≥n: {e}")
        return False

def remove_duplicate_instruments(instruments):
    """Elimina instrumentos duplicados bas√°ndose en m√∫ltiples criterios"""
    try:
        unique_instruments = []
        seen_ids = set()
        seen_names = set()
        
        for instrument in instruments:
            equipment_id = instrument.get('equipment_id', '')
            equipment_name = instrument.get('equipment_name', '').lower().strip()
            
            # Crear clave √∫nica combinando ID y nombre normalizado
            normalized_name = re.sub(r'\s+', ' ', equipment_name)
            unique_key = f"{equipment_id}|{normalized_name}"
            
            # Evitar duplicados por ID
            if equipment_id and equipment_id in seen_ids:
                continue
            
            # Evitar duplicados por nombre muy similar
            if equipment_name and equipment_name in seen_names:
                continue
            
            # Verificar similitud con nombres existentes (para casos como "Guitar" vs "guitar")
            is_similar = False
            for existing_name in seen_names:
                if equipment_name and existing_name:
                    # Verificar si son muy similares (diferencia solo en may√∫sculas/espacios)
                    if normalized_name == re.sub(r'\s+', ' ', existing_name):
                        is_similar = True
                        break
            
            if is_similar:
                continue
            
            # Agregar a las listas √∫nicas
            if equipment_id:
                seen_ids.add(equipment_id)
            if equipment_name:
                seen_names.add(equipment_name)
            
            unique_instruments.append(instrument)
        
        return unique_instruments
        
    except Exception as e:
        logger.error(f"Error eliminando duplicados: {e}")
        return instruments
  

def extract_equipment_name(element):
    """Extrae el nombre del equipo de diferentes fuentes en el elemento"""
    try:
        # Intentar obtener texto directo del elemento
        equipment_name = element.text.strip()
        
        if equipment_name and len(equipment_name) > 2:
            return equipment_name
        
        # Intentar obtener de atributos
        for attr in ['title', 'aria-label', 'data-title', 'alt']:
            name = element.get_attribute(attr)
            if name and len(name.strip()) > 2:
                return name.strip()
        
        # Buscar en elementos hijos con texto
        try:
            for child_selector in ['span', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'p', '.gear-name', '.equipment-name']:
                try:
                    child = element.find_element(By.CSS_SELECTOR, child_selector)
                    child_text = child.text.strip()
                    if child_text and len(child_text) > 2:
                        return child_text
                except:
                    continue
        except:
            pass
        
        # √öltimo recurso: extraer del href
        href = element.get_attribute('href')
        if href:
            # Extraer nombre del slug en la URL
            parts = href.split('/')
            for part in reversed(parts):
                if part and part not in ['items', 'gear', 'equipboard.com']:
                    # Convertir slug a nombre legible
                    name = part.replace('-', ' ').replace('_', ' ').title()
                    if len(name) > 2:
                        return name
        
        return ""
        
    except Exception as e:
        logger.debug(f"Error extrayendo nombre de equipo: {e}")
        return ""



def restart_driver(driver, headless=True):
    """Reinicia el driver para evitar que se cuelgue"""
    try:
        logger.info("üîÑ Reiniciando driver para evitar cuelgues...")
        
        # Cerrar driver actual
        if driver:
            try:
                driver.quit()
                logger.info("‚úÖ Driver anterior cerrado")
            except:
                pass
        
        # Esperar un poco antes de crear nuevo driver
        time.sleep(random.uniform(3, 5))
        
        # Crear nuevo driver
        new_driver = setup_selenium_driver(headless=headless)
        if new_driver:
            logger.info("‚úÖ Nuevo driver creado exitosamente")
            return new_driver
        else:
            logger.error("‚ùå Error creando nuevo driver")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Error reiniciando driver: {e}")
        return None



def extract_instruments_from_page(driver, artist_name, artist_url):
    """Versi√≥n ultra-simplificada de extracci√≥n de instrumentos"""
    try:
        logger.info(f"üéµ Procesando {artist_name}")
        logger.info(f"üåê Cargando: {artist_url}")
        
        # 1. Cargar la p√°gina directamente
        driver.get(artist_url)
        logger.info("‚úÖ P√°gina cargada")
        
        # 2. Esperar random entre 3-5s
        wait_time = random.uniform(3, 5)
        logger.info(f"‚è≥ Esperando {wait_time:.1f}s...")
        time.sleep(wait_time)
        
        # 3. Scroll hasta el final 3 veces
        logger.info("üìú Realizando 3 scrolls...")
        for i in range(3):
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(random.uniform(1, 2))
            logger.info(f"üìú Scroll {i+1}/3 completado")
        
        # 4. Buscar y hacer click en LOAD MORE hasta que no aparezca m√°s
        load_more_clicks = handle_load_more_button(driver, max_clicks=15)
        logger.info(f"üîÑ Clicks en LOAD MORE: {load_more_clicks}")
        
        # 5. Obtener instrumentos
        instruments = extract_instruments_data(driver, artist_name)
        logger.info(f"üéØ Instrumentos encontrados: {len(instruments)}")
        
        return instruments
        
    except Exception as e:
        logger.error(f"‚ùå Error procesando {artist_name}: {e}")
        return []


def parse_brand_model_simple(equipment_name):
    """Extrae marca y modelo de forma simple"""
    try:
        # Lista de marcas conocidas m√°s comunes
        known_brands = [
            # Software/DAW
            'Apple Logic', 'Apple', 'Ableton', 'Native Instruments', 'FabFilter', 'Waves',
            
            # Guitarras
            'Fender', 'Gibson', 'Martin', 'Taylor', 'Yamaha', 'Ibanez', 'PRS', 'Gretsch',
            'Rickenbacker', 'Epiphone', 'Squier', 'ESP', 'Jackson',
            
            # Amplificadores
            'Marshall', 'Fender', 'Vox', 'Orange', 'Mesa Boogie', 'Ampeg', 'Roland',
            'Peavey', 'Blackstar',
            
            # Efectos
            'Boss', 'Ibanez', 'Electro-Harmonix', 'MXR', 'TC Electronic', 'Strymon',
            
            # Sintetizadores
            'Korg', 'Moog', 'Roland', 'Sequential', 'Arturia',
            
            # Otros
            'Shure', 'AKG', 'Neumann', 'DW', 'Pearl'
        ]
        
        # Buscar marca al inicio del nombre
        for brand in sorted(known_brands, key=len, reverse=True):
            if equipment_name.lower().startswith(brand.lower()):
                model = equipment_name[len(brand):].strip()
                model = re.sub(r'^[\s\-‚Äì‚Äî]+', '', model)
                return brand, model
        
        # Si no encuentra marca, usar primera palabra
        words = equipment_name.split()
        if len(words) >= 2:
            return words[0], ' '.join(words[1:])
        
        return equipment_name, ""
        
    except Exception as e:
        return equipment_name, ""

def infer_equipment_type_simple(equipment_name):
    """Infiere el tipo de equipo de forma simple"""
    name_lower = equipment_name.lower()
    
    type_patterns = {
        'electric_guitar': ['guitar', 'strat', 'telecaster', 'les paul'],
        'bass_guitar': ['bass'],
        'amplifier': ['amp', 'amplifier', 'head', 'combo'],
        'effect_pedal': ['pedal', 'distortion', 'overdrive', 'delay', 'reverb'],
        'synthesizer': ['synth', 'synthesizer', 'moog'],
        'software': ['logic', 'ableton', 'pro tools', 'plugin', 'vst'],
        'microphone': ['microphone', 'mic', 'sm57', 'sm58'],
        'drums': ['drums', 'kit', 'snare', 'cymbal']
    }
    
    for eq_type, patterns in type_patterns.items():
        for pattern in patterns:
            if pattern in name_lower:
                return eq_type
    
    return 'unknown'

def get_artists_to_process(cursor, force_update=False, limit=None):
    """Obtiene artistas que necesitan procesamiento de instrumentos"""
    if force_update:
        # Si force_update, procesar todos los artistas con URL v√°lida de equipboard_artists
        query = """
            SELECT ea.artist_id, ea.artist_name, ea.equipboard_url 
            FROM equipboard_artists ea 
            WHERE ea.status = 'found' 
            AND ea.equipboard_url IS NOT NULL
            AND ea.equipboard_url != ''
            AND ea.equipboard_url NOT LIKE '%/pros/select%'
            AND ea.equipboard_url NOT LIKE '%signup%'
            AND ea.equipboard_url NOT LIKE '%login%'
        """
    else:
        # Solo procesar artistas que no han sido procesados para instrumentos
        query = """
            SELECT ea.artist_id, ea.artist_name, ea.equipboard_url 
            FROM equipboard_artists ea 
            LEFT JOIN (
                SELECT artist_id, COUNT(*) as instrument_count 
                FROM equipboard_instruments 
                GROUP BY artist_id
            ) ei ON ea.artist_id = ei.artist_id 
            WHERE ea.status = 'found' 
            AND ea.equipboard_url IS NOT NULL 
            AND ea.equipboard_url != ''
            AND ea.equipboard_url NOT LIKE '%/pros/select%'
            AND ea.equipboard_url NOT LIKE '%signup%'
            AND ea.equipboard_url NOT LIKE '%login%'
            AND ei.instrument_count IS NULL
        """
    
    if limit:
        query += f" LIMIT {limit}"
    
    cursor.execute(query)
    return cursor.fetchall()

def inspect_equipboard_urls(database_path, limit=10):
    """Inspecciona las URLs de equipboard en la base de datos"""
    try:
        conn = sqlite3.connect(database_path)
        cursor = conn.cursor()
        
        # Verificar tabla equipboard_artists
        cursor.execute("SELECT COUNT(*) FROM equipboard_artists")
        total_artists = cursor.fetchone()[0]
        
        cursor.execute("""
            SELECT COUNT(*) FROM equipboard_artists 
            WHERE equipboard_url IS NOT NULL AND equipboard_url != ''
        """)
        artists_with_urls = cursor.fetchone()[0]
        
        print(f"=== INSPECCI√ìN DE URLs EQUIPBOARD ===")
        print(f"Total artistas en equipboard_artists: {total_artists}")
        print(f"Artistas con URLs: {artists_with_urls}")
        
        # Mostrar ejemplos de URLs
        cursor.execute("""
            SELECT artist_name, equipboard_url, status 
            FROM equipboard_artists 
            WHERE equipboard_url IS NOT NULL 
            AND equipboard_url != ''
            LIMIT ?
        """, (limit,))
        
        sample_urls = cursor.fetchall()
        
        print(f"\n--- MUESTRA DE URLs ({len(sample_urls)} primeras) ---")
        for artist_name, url, status in sample_urls:
            print(f"{artist_name}: {url} (status: {status})")
        
        # Verificar URLs problem√°ticas
        cursor.execute("""
            SELECT COUNT(*) FROM equipboard_artists 
            WHERE equipboard_url LIKE '%/pros/select%' 
            OR equipboard_url LIKE '%signup%' 
            OR equipboard_url LIKE '%login%'
        """)
        problematic_urls = cursor.fetchone()[0]
        
        print(f"\n--- AN√ÅLISIS DE URLs ---")
        print(f"URLs problem√°ticas (select/signup/login): {problematic_urls}")
        
        # URLs v√°lidas para procesamiento
        cursor.execute("""
            SELECT COUNT(*) FROM equipboard_artists 
            WHERE equipboard_url IS NOT NULL 
            AND equipboard_url != ''
            AND equipboard_url NOT LIKE '%/pros/select%'
            AND equipboard_url NOT LIKE '%signup%'
            AND equipboard_url NOT LIKE '%login%'
            AND status = 'found'
        """)
        valid_urls = cursor.fetchone()[0]
        
        print(f"URLs v√°lidas para procesamiento: {valid_urls}")
        
        # Verificar si hay instrumentos ya extra√≠dos
        cursor.execute("SELECT COUNT(*) FROM equipboard_instruments")
        total_instruments = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(DISTINCT artist_id) FROM equipboard_instruments")
        artists_with_instruments = cursor.fetchone()[0]
        
        print(f"\n--- ESTADO DE INSTRUMENTOS ---")
        print(f"Total instrumentos extra√≠dos: {total_instruments}")
        print(f"Artistas con instrumentos: {artists_with_instruments}")
        
        # Artistas pendientes de procesar
        cursor.execute("""
            SELECT COUNT(*) FROM equipboard_artists ea
            LEFT JOIN (
                SELECT DISTINCT artist_id 
                FROM equipboard_instruments
            ) ei ON ea.artist_id = ei.artist_id 
            WHERE ea.status = 'found' 
            AND ea.equipboard_url IS NOT NULL 
            AND ea.equipboard_url != ''
            AND ea.equipboard_url NOT LIKE '%/pros/select%'
            AND ea.equipboard_url NOT LIKE '%signup%'
            AND ea.equipboard_url NOT LIKE '%login%'
            AND ei.artist_id IS NULL
        """)
        pending_artists = cursor.fetchone()[0]
        
        print(f"Artistas pendientes de procesar: {pending_artists}")
        
    except Exception as e:
        print(f"Error inspeccionando URLs: {e}")
    finally:
        if 'conn' in locals():
            conn.close()


def debug_urls(database_path):
    """Funci√≥n de debugging para inspeccionar URLs"""
    print("=== MODO DEBUG: INSPECCIONANDO URLs ===")
    inspect_equipboard_urls(database_path, limit=20)
    
    # Mostrar URLs problem√°ticas espec√≠ficas
    try:
        conn = sqlite3.connect(database_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT artist_name, equipboard_url 
            FROM equipboard_artists 
            WHERE equipboard_url LIKE '%/pros/select%' 
            OR equipboard_url LIKE '%signup%'
            OR equipboard_url LIKE '%login%'
            LIMIT 10
        """)
        
        problematic = cursor.fetchall()
        if problematic:
            print(f"\n--- URLs PROBLEM√ÅTICAS ENCONTRADAS ---")
            for artist, url in problematic:
                print(f"{artist}: {url}")
        
    except Exception as e:
        print(f"Error en debug: {e}")
    finally:
        if 'conn' in locals():
            conn.close()


def save_instruments(cursor, artist_id, instruments):
    """Guarda los instrumentos en la base de datos"""
    try:
        for instrument in instruments:
            cursor.execute('''
                INSERT OR REPLACE INTO equipboard_instruments 
                (artist_id, artist_name, equipment_id, equipment_name, equipment_url, 
                 brand, model, equipment_type)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                artist_id,
                instrument['artist_name'],
                instrument['equipment_id'],
                instrument['equipment_name'],
                instrument['equipment_url'],
                instrument['brand'],
                instrument['model'],
                instrument['equipment_type']
            ))
        
    except Exception as e:
        logger.error(f"Error guardando instrumentos: {e}")



def process_artists_instruments(database_path, force_update=False, limit=None, headless=True):
    """Versi√≥n con reinicio de driver cada 5 artistas"""
    driver = None
    try:
        logger.info("üîÑ Iniciando process_artists_instruments")
        logger.info(f"üéØ Par√°metro headless recibido: {headless} (tipo: {type(headless)})")

        conn = sqlite3.connect(database_path)
        cursor = conn.cursor()
        logger.info("‚úÖ Conexi√≥n a base de datos establecida")
        
        create_equipboard_instruments_table(cursor)
        logger.info("‚úÖ Tabla equipboard_instruments verificada")
        
        artists = get_artists_to_process(cursor, force_update, limit)
        logger.info(f"‚úÖ Obtenidos {len(artists)} artistas para procesar")
        
        if not artists:
            logger.info("‚ÑπÔ∏è No hay artistas para procesar instrumentos")
            return
        
        logger.info(f"üöÄ Procesando instrumentos de {len(artists)} artistas")
        
        # Configurar driver inicial
        logger.info(f"üîß Configurando driver inicial con headless={headless}...")
        driver = setup_selenium_driver(headless=headless)
        if not driver:
            logger.error("‚ùå No se pudo crear driver inicial")
            return
        
        logger.info("‚úÖ Driver inicial configurado exitosamente")
        
        stats = {'processed': 0, 'total_instruments': 0, 'errors': 0}
        
        for i, (artist_id, artist_name, artist_url) in enumerate(artists, 1):
            try:
                logger.info(f"\n{'='*60}")
                logger.info(f"[{i}/{len(artists)}] üéµ PROCESANDO: {artist_name}")
                logger.info(f"URL: {artist_url}")
                logger.info(f"Artist ID: {artist_id}")
                logger.info(f"{'='*60}")
                
                # Reiniciar driver cada 5 artistas para evitar cuelgues
                if i > 1 and (i - 1) % 5 == 0:
                    logger.info(f"üîÑ Reiniciando driver despu√©s de {i-1} artistas...")
                    driver = restart_driver(driver, headless)
                    if not driver:
                        logger.error("‚ùå No se pudo reiniciar driver")
                        break
                
                # Verificar URL antes de continuar
                if not artist_url or artist_url.strip() == '':
                    logger.error(f"‚ùå URL vac√≠a para {artist_name}")
                    continue
                
                logger.info(f"üåê Iniciando extracci√≥n para {artist_name}")
                
                # Extraer instrumentos
                instruments = extract_instruments_from_page(driver, artist_name, artist_url)
                
                if instruments:
                    logger.info(f"üíæ Guardando {len(instruments)} instrumentos...")
                    save_instruments(cursor, artist_id, instruments)
                    stats['total_instruments'] += len(instruments)
                    logger.info(f"‚úÖ {artist_name}: {len(instruments)} instrumentos guardados")
                else:
                    logger.warning(f"‚ö†Ô∏è {artist_name}: No se encontraron instrumentos")
                
                stats['processed'] += 1
                
                # Commit cada 3 artistas
                if i % 3 == 0:
                    conn.commit()
                    logger.info(f"üíæ Progreso guardado: {i}/{len(artists)}")
                
                # Pausa entre artistas (m√°s larga despu√©s de reinicio)
                if (i - 1) % 5 == 0 and i > 1:
                    delay = random.uniform(5, 10)  # Pausa m√°s larga despu√©s de reinicio
                else:
                    delay = random.uniform(1, 5)  # Pausa normal
                
                logger.info(f"‚è≥ Pausa de {delay:.1f}s antes del siguiente artista...")
                time.sleep(delay)
                
            except Exception as e:
                logger.error(f"‚ùå Error procesando {artist_name}: {e}")
                import traceback
                logger.error(f"Traceback: {traceback.format_exc()}")
                stats['errors'] += 1
                
                # Pausa extra en caso de error
                time.sleep(random.uniform(15, 25))
                continue
        
        conn.commit()
        
        logger.info(f"\n{'='*60}")
        logger.info(f"=== ESTAD√çSTICAS FINALES ===")
        logger.info(f"Artistas procesados: {stats['processed']}")
        logger.info(f"Total instrumentos: {stats['total_instruments']}")
        logger.info(f"Errores: {stats['errors']}")
        logger.info(f"{'='*60}")
        
    except Exception as e:
        logger.error(f"‚ùå Error en procesamiento principal: {e}")
        import traceback
        logger.error(f"Traceback completo: {traceback.format_exc()}")
    finally:
        if driver:
            try:
                logger.info("üîÑ Cerrando driver...")
                driver.quit()
                logger.info("‚úÖ Driver cerrado")
            except:
                pass
        if 'conn' in locals():
            conn.close()
            logger.info("‚úÖ Conexi√≥n a BD cerrada")

def simulate_human_behavior(driver):
    """Comportamiento humano muy simplificado"""
    try:
        # Solo un scroll aleatorio peque√±o
        scroll_amount = random.randint(200, 500)
        driver.execute_script(f"window.scrollBy(0, {scroll_amount});")
        time.sleep(random.uniform(1, 2))
        
    except Exception as e:
        logger.debug(f"Error simulando comportamiento: {e}")

def check_load_more_exists(driver):
    """Verifica r√°pidamente si existe bot√≥n LOAD MORE"""
    try:
        xpath_patterns = [
            "//button[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'load more')]",
            "//a[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'load more')]",
        ]
        
        for xpath in xpath_patterns:
            elements = driver.find_elements(By.XPATH, xpath)
            if elements:
                return True
        
        return False
        
    except Exception:
        return False

def perform_complete_scroll(driver, max_scrolls=20):
    """Realiza scroll completo hasta el final de la p√°gina"""
    try:
        logger.info("üìú Iniciando scroll completo de la p√°gina...")
        
        last_height = driver.execute_script("return document.body.scrollHeight")
        scroll_count = 0
        no_change_count = 0
        
        while scroll_count < max_scrolls and no_change_count < 2:
            # Scroll grande hacia abajo
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            
            # Esperar que cargue contenido
            time.sleep(random.uniform(2, 4))
            
            # Verificar si la altura cambi√≥ (nuevo contenido cargado)
            new_height = driver.execute_script("return document.body.scrollHeight")
            
            if new_height > last_height:
                logger.info(f"üìà Nuevo contenido cargado: {last_height} ‚Üí {new_height}")
                last_height = new_height
                no_change_count = 0
            else:
                no_change_count += 1
                logger.info(f"‚è∏Ô∏è Sin cambio de altura ({no_change_count}/2)")
            
            scroll_count += 1
            
            # Scroll intermedio para simular lectura
            if scroll_count % 3 == 0:
                driver.execute_script("window.scrollTo(0, document.body.scrollHeight * 0.7);")
                time.sleep(random.uniform(1, 2))
                driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        
        logger.info(f"üìú Scroll completado: {scroll_count} scrolls realizados")
        return scroll_count
        
    except Exception as e:
        logger.error(f"Error en scroll completo: {e}")
        return 0

# REEMPLAZA tu funci√≥n handle_load_more_button con esta versi√≥n mejorada:

def handle_load_more_button(driver, max_clicks=15):
    """Manejo simplificado de botones LOAD MORE"""
    clicks = 0
    
    try:
        for _ in range(max_clicks):
            # Scroll al final
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(2)
            
            # Buscar bot√≥n LOAD MORE con selector simple
            load_more_button = None
            try:
                buttons = driver.find_elements(By.XPATH, "//button[contains(text(), 'Load More') or contains(text(), 'load more') or contains(text(), 'LOAD MORE')]")
                if buttons:
                    for button in buttons:
                        if button.is_displayed() and button.is_enabled():
                            load_more_button = button
                            break
            except:
                pass
            
            # Si no hay bot√≥n, terminar
            if not load_more_button:
                logger.info(f"üîö No m√°s botones LOAD MORE (clicks realizados: {clicks})")
                break
            
            # Hacer click
            try:
                driver.execute_script("arguments[0].click();", load_more_button)
                clicks += 1
                logger.info(f"üîÑ Click #{clicks} en LOAD MORE")
                
                # Esperar que cargue contenido
                time.sleep(random.uniform(3, 5))
                
            except Exception as e:
                logger.warning(f"‚ùå Error haciendo click en LOAD MORE: {e}")
                break
        
        return clicks
        
    except Exception as e:
        logger.error(f"‚ùå Error en handle_load_more_button: {e}")
        return clicks

# MODIFICA la funci√≥n extract_instruments_from_page_debug para incluir mejor scroll:

def extract_instruments_from_page_debug(driver, artist_name, artist_url):
    """Versi√≥n simplificada con scroll m√≠nimo necesario"""
    try:
        logger.info(f"üéµ [DEBUG] Iniciando extracci√≥n para {artist_name}")
        
        # Cargar p√°gina
        if not smart_page_load_debug(driver, artist_url, artist_name):
            logger.error(f"‚ùå [DEBUG] smart_page_load fall√≥ para {artist_name}")
            return []
        
        logger.info(f"‚úÖ [DEBUG] P√°gina cargada exitosamente")
        
        # Un solo scroll inicial hasta el final
        logger.info(f"üìú [DEBUG] Scroll inicial hasta el final...")
        perform_single_scroll_to_bottom(driver)
        
        # Comportamiento humano m√≠nimo
        time.sleep(random.uniform(2, 3))
        
        # Contar elementos iniciales
        initial_count = len(driver.find_elements(By.CSS_SELECTOR, "a[href*='/gear/'], a[href*='/items/']"))
        logger.info(f"üé∏ [DEBUG] Instrumentos iniciales detectados: {initial_count}")
        
        # Manejar LOAD MORE (simplificado)
        if initial_count > 0:
            load_more_clicks = handle_load_more_button(driver, max_clicks=10)
            logger.info(f"üîÑ [DEBUG] Clicks en LOAD MORE realizados: {load_more_clicks}")
        else:
            logger.warning(f"‚ö†Ô∏è [DEBUG] No se detectaron instrumentos iniciales")
            load_more_clicks = 0
        
        # Contar elementos finales
        final_count = len(driver.find_elements(By.CSS_SELECTOR, "a[href*='/gear/'], a[href*='/items/']"))
        logger.info(f"üé∏ [DEBUG] Resultado final: {initial_count} ‚Üí {final_count} instrumentos")
        
        # Solo extraer si hay elementos
        if final_count > 0:
            instruments = extract_instruments_data(driver, artist_name)
            logger.info(f"üéØ [DEBUG] Instrumentos extra√≠dos: {len(instruments)}")
            return instruments
        else:
            logger.warning(f"‚ö†Ô∏è [DEBUG] No se encontraron elementos para extraer")
            return []
        
    except Exception as e:
        logger.error(f"‚ùå [DEBUG] Error en extracci√≥n: {e}")
        return []



def perform_single_scroll_to_bottom(driver):
    """Hace UN SOLO scroll hasta el final sin repetir"""
    try:
        logger.info("üìú Scroll √∫nico hasta el final...")
        
        # Obtener altura actual antes del scroll
        initial_height = driver.execute_script("return document.body.scrollHeight")
        
        # UN SOLO scroll hasta el final
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        
        # Esperar a que cargue contenido
        time.sleep(random.uniform(3, 5))
        
        # Verificar si cambi√≥ la altura
        final_height = driver.execute_script("return document.body.scrollHeight")
        
        if final_height > initial_height:
            logger.info(f"‚úÖ Scroll completado - Altura: {initial_height} ‚Üí {final_height}")
        else:
            logger.info(f"‚úÖ Scroll completado - Sin cambio de altura: {initial_height}")
        
        return True
        
    except Exception as e:
        logger.error(f"Error en scroll: {e}")
        return False




def smart_page_load_debug(driver, url, artist_name, max_retries=2):
    """Versi√≥n con debug detallado de smart_page_load"""
    try:
        logger.info(f"üåê [DEBUG] Iniciando smart_page_load_debug")
        logger.info(f"üîó [DEBUG] URL original: {url}")
        
        # Validar URL
        validated_url = validate_and_fix_url(url, artist_name)
        if not validated_url:
            logger.error(f"‚ùå [DEBUG] URL no v√°lida para {artist_name}: {url}")
            return False
        
        logger.info(f"‚úÖ [DEBUG] URL validada: {validated_url}")
        
        for attempt in range(max_retries):
            try:
                logger.info(f"üöÄ [DEBUG] Intento {attempt + 1}/{max_retries}")
                logger.info(f"üåê [DEBUG] Cargando {validated_url}")
                
                if attempt > 0:
                    delay = random.uniform(3, 7)
                    logger.info(f"‚è≥ [DEBUG] Delay entre intentos: {delay:.1f}s...")
                    time.sleep(delay)
                
                # Intentar cargar la p√°gina
                logger.info(f"üîÑ [DEBUG] Ejecutando driver.get()...")
                driver.get(validated_url)
                logger.info(f"‚úÖ [DEBUG] driver.get() completado")
                
                # Verificar estado inmediato
                try:
                    immediate_url = driver.current_url
                    immediate_title = driver.title
                    logger.info(f"üåê [DEBUG] URL inmediata: {immediate_url}")
                    logger.info(f"üìÑ [DEBUG] T√≠tulo inmediato: {immediate_title}")
                except Exception as e:
                    logger.error(f"‚ùå [DEBUG] Error obteniendo estado inmediato: {e}")
                
                # Esperar un poco y verificar nuevamente
                time.sleep(3)
                
                try:
                    delayed_url = driver.current_url
                    delayed_title = driver.title
                    page_length = len(driver.page_source)
                    logger.info(f"üåê [DEBUG] URL despu√©s de 3s: {delayed_url}")
                    logger.info(f"üìÑ [DEBUG] T√≠tulo despu√©s de 3s: {delayed_title}")
                    logger.info(f"üìè [DEBUG] Longitud del contenido: {page_length}")
                except Exception as e:
                    logger.error(f"‚ùå [DEBUG] Error en verificaci√≥n retardada: {e}")
                
                # Manejo simplificado - asumir √©xito si llegamos aqu√≠
                logger.info(f"‚úÖ [DEBUG] Carga b√°sica completada en intento {attempt + 1}")
                return True
                
            except Exception as e:
                logger.error(f"‚ùå [DEBUG] Error en intento {attempt + 1}: {e}")
                import traceback
                logger.error(f"Traceback: {traceback.format_exc()}")
                continue
        
        logger.error(f"‚ùå [DEBUG] Todos los intentos fallaron")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå [DEBUG] Error en smart_page_load_debug: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return False


def get_instruments_stats(database_path):
    """Muestra estad√≠sticas de instrumentos extra√≠dos"""
    try:
        conn = sqlite3.connect(database_path)
        cursor = conn.cursor()
        
        # Estad√≠sticas b√°sicas
        cursor.execute("SELECT COUNT(*) FROM equipboard_instruments")
        total_instruments = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(DISTINCT artist_id) FROM equipboard_instruments")
        artists_with_instruments = cursor.fetchone()[0]
        
        print(f"\n=== ESTAD√çSTICAS DE INSTRUMENTOS ===")
        print(f"Total instrumentos: {total_instruments}")
        print(f"Artistas con instrumentos: {artists_with_instruments}")
        
        # Top marcas
        cursor.execute("""
            SELECT brand, COUNT(*) as count 
            FROM equipboard_instruments 
            WHERE brand IS NOT NULL AND brand != ''
            GROUP BY brand 
            ORDER BY count DESC 
            LIMIT 10
        """)
        top_brands = cursor.fetchall()
        
        print(f"\n--- TOP 10 MARCAS ---")
        for brand, count in top_brands:
            print(f"{brand}: {count}")
        
        # Top tipos de equipo
        cursor.execute("""
            SELECT equipment_type, COUNT(*) as count 
            FROM equipboard_instruments 
            WHERE equipment_type IS NOT NULL 
            GROUP BY equipment_type 
            ORDER BY count DESC 
            LIMIT 10
        """)
        top_types = cursor.fetchall()
        
        print(f"\n--- TOP 10 TIPOS DE EQUIPO ---")
        for eq_type, count in top_types:
            print(f"{eq_type}: {count}")
        
        # Artistas con m√°s instrumentos
        cursor.execute("""
            SELECT artist_name, COUNT(*) as count 
            FROM equipboard_instruments 
            GROUP BY artist_name 
            ORDER BY count DESC 
            LIMIT 10
        """)
        top_artists = cursor.fetchall()
        
        print(f"\n--- TOP 10 ARTISTAS CON M√ÅS INSTRUMENTOS ---")
        for artist, count in top_artists:
            print(f"{artist}: {count}")
        
    except Exception as e:
        logger.error(f"Error obteniendo estad√≠sticas: {e}")
    finally:
        if 'conn' in locals():
            conn.close()

def validate_and_fix_url(artist_url, artist_name):
    """Valida y corrige URLs de equipboard"""
    try:
        # URLs problem√°ticas conocidas
        invalid_patterns = [
            '/pros/select',
            '/sign',
            '/signup',
            '/login',
            '/register'
        ]
        
        # Verificar si la URL es v√°lida
        if not artist_url or any(pattern in artist_url for pattern in invalid_patterns):
            logger.warning(f"‚ö†Ô∏è URL inv√°lida para {artist_name}: {artist_url}")
            
            # Intentar construir URL correcta
            artist_slug = artist_name.lower().replace(' ', '-').replace('(', '').replace(')', '').replace('&', 'and')
            artist_slug = re.sub(r'[^a-z0-9\-]', '', artist_slug)
            corrected_url = f"https://equipboard.com/pros/{artist_slug}"
            
            logger.info(f"üîß URL corregida: {corrected_url}")
            return corrected_url
        
        # Verificar formato correcto de equipboard
        if 'equipboard.com/pros/' not in artist_url:
            logger.warning(f"‚ö†Ô∏è URL no parece de equipboard: {artist_url}")
            return None
        
        return artist_url
        
    except Exception as e:
        logger.error(f"Error validando URL: {e}")
        return None

def normalize_headless_param(headless_value):
    """
    Normaliza el par√°metro headless a boolean desde diferentes tipos de entrada
    Acepta: bool, str ('true'/'false'), int (0/1)
    """
    try:
        logger.debug(f"üîç Normalizando headless_value: {headless_value} (tipo: {type(headless_value)})")
        
        # Si ya es boolean, devolverlo directamente
        if isinstance(headless_value, bool):
            logger.debug(f"‚úÖ Ya es boolean: {headless_value}")
            return headless_value
        
        # Si es string, convertir correctamente
        if isinstance(headless_value, str):
            str_value = headless_value.lower().strip()
            # Valores que significan FALSE (no headless = mostrar interfaz)
            false_values = ['false', '0', 'no', 'off', 'f']
            # Valores que significan TRUE (headless = sin interfaz)
            true_values = ['true', '1', 'yes', 'on', 't']
            
            if str_value in false_values:
                logger.debug(f"‚úÖ String '{headless_value}' interpretado como FALSE")
                return False
            elif str_value in true_values:
                logger.debug(f"‚úÖ String '{headless_value}' interpretado como TRUE")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è String '{headless_value}' no reconocido, usando True por defecto")
                return True
        
        # Si es n√∫mero, convertir
        if isinstance(headless_value, (int, float)):
            result = bool(headless_value)
            logger.debug(f"‚úÖ N√∫mero {headless_value} convertido a {result}")
            return result
        
        # Default en caso de valor no reconocido
        logger.warning(f"‚ö†Ô∏è Valor headless no reconocido: {headless_value} (tipo: {type(headless_value)}), usando True por defecto")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error normalizando par√°metro headless: {e}")
        return True

def main(config=None):
    """Funci√≥n principal con manejo corregido de argumentos headless"""
    logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
    logger.setLevel(logging.DEBUG)
    
    if config is None:
        import argparse
        
        parser = argparse.ArgumentParser(description='Extraer instrumentos de equipboard.com')
        parser.add_argument('--action', choices=['extract', 'stats', 'debug'], default='extract')
        parser.add_argument('--db_path', type=str, default='db/sqlite/musica.sqlite')
        parser.add_argument('--limit', type=int, help='L√≠mite de artistas a procesar')
        parser.add_argument('--force-update', action='store_true')
        
        # Corregir el manejo de headless - usar string y convertir
        parser.add_argument('--headless', type=str, default='true', 
                          choices=['true', 'false'],
                          help='Ejecutar en modo headless (true/false)')
        
        args = parser.parse_args()
        config = vars(args)
    
    # Debug del config recibido
    logger.info(f"üîß Config recibido: {config}")
    raw_headless = config.get('headless', True)
    logger.info(f"üîç Valor headless RAW: {raw_headless} (tipo: {type(raw_headless)})")
    
    # Normalizar el par√°metro headless
    headless = normalize_headless_param(raw_headless)
    config['headless'] = headless
    
    logger.info(f"üéØ Valor headless FINAL: {headless}")
    
    action = config.get('action', 'extract')
    
    if action == 'debug':
        debug_urls(config.get('db_path', 'db/sqlite/musica.sqlite'))
    elif action == 'extract':
        logger.info(f"üöÄ Iniciando extracci√≥n con headless={headless}")
        process_artists_instruments(
            database_path=config.get('db_path', 'db/sqlite/musica.sqlite'),
            force_update=config.get('force_update', False),
            limit=config.get('limit'),
            headless=headless
        )
    elif action == 'stats':
        get_instruments_stats(config.get('db_path', 'db/sqlite/musica.sqlite'))

if __name__ == "__main__":
    main()